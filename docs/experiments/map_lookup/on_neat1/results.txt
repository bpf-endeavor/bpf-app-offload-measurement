command for generating report:

    for x in *.txt; do echo -----; echo $x; cat $x | grep benchmark | awk '{print $3 / 100000}' | ../../../latency_script.py ; done

note: the repitation of memory access was set to 100000 in the BPF program. Thi is the reason of dividing by 100K.


results:

-----
array.txt
samples: 100
max: 5.7325
min: 3.82086
mean: 4.15
@1 : 3.82087
@50: 3.93427
@99: 5.7325
std: 0.430
standard err: 0.043
median (iqr): 3.93427 (0.4779499999999999)
box-plot: 3.11--[3.82247-|3.93427|-4.30042]--5.02
meidan +- range: 3.93427 +- 0.8418499999999995
-----
hash_4b.txt
samples: 100
max: 20.0773
min: 17.6751
mean: 18.84
@1 : 17.6909
@50: 18.8676
@99: 20.0773
std: 0.506
standard err: 0.051
median (iqr): 18.8676 (0.6368000000000009)
box-plot: 17.54--[18.4997-|18.8676|-19.1365]--20.09
meidan +- range: 18.8676 +- 1.2097000000000016
-----
lru_4b.txt
samples: 350
max: 31.2162
min: 18.1552
mean: 19.41
@1 : 18.1591
@50: 19.2943
@99: 21.8071
std: 0.858
standard err: 0.046
median (iqr): 19.2943 (0.5606000000000009)
box-plot: 18.26--[19.0998-|19.2943|-19.6604]--20.50
meidan +- range: 19.2943 +- 1.1443000000000012
-----
on_stack.txt
samples: 100
max: 3.34337
min: 2.38857
mean: 2.53
@1 : 2.38883
@50: 2.39001
@99: 3.34337
std: 0.226
standard err: 0.023
median (iqr): 2.39001 (0.47692999999999985)
box-plot: 1.67--[2.38916-|2.39001|-2.86609]--3.58
meidan +- range: 2.39001 +- 0.95336
-------
array_percpu.txt
samples: 100
max: 7.79406
min: 4.29927
mean: 4.95
@1 : 4.29964
@50: 4.77851
@99: 7.79406
std: 0.898
standard err: 0.090
median (iqr): 4.77851 (0.4763599999999997)
box-plot: 3.59--[4.30829-|4.77851|-4.78465]--5.50
meidan +- range: 4.77851 +- 0.5621200000000002
