From 6ab742b18dcc5f910ed5d64fa10da2f0cd49df65 Mon Sep 17 00:00:00 2001
From: Farbod Shahinfar <fshahinfar1@gmail.com>
Date: Fri, 18 Apr 2025 22:45:25 +0200
Subject: [PATCH 2/6] wip: [will not compile] trying to add BMC tx path to the
 seastar memcached

---
 apps/memcached/bmc_tx_path.hh          | 141 ++++++++++++++-----------
 apps/memcached/bpf_userspace_helpers.h |  46 ++++++++
 apps/memcached/memcache.cc             |   5 +
 3 files changed, 128 insertions(+), 64 deletions(-)
 create mode 100644 apps/memcached/bpf_userspace_helpers.h

diff --git a/apps/memcached/bmc_tx_path.hh b/apps/memcached/bmc_tx_path.hh
index 176e89a6..c830a77f 100644
--- a/apps/memcached/bmc_tx_path.hh
+++ b/apps/memcached/bmc_tx_path.hh
@@ -1,9 +1,10 @@
+/* vim: set et ts=4 sw=4: */
 #pragma once
 #include <iostream>
+#include <assert.h>
 #include <seastar/net/packet.hh>
 #include "bmc_common.h"
-
-typedef int16_t __be16;
+#include "bpf_userspace_helpers.h"
 
 struct memcached_udp_header {
     __be16 request_id;
@@ -11,75 +12,52 @@ struct memcached_udp_header {
     __be16 num_dgram;
     __be16 unused;
     char data[];
-} __attribute__((__packed__))
-
-int bmc_tx_filter_main(seastar::packet &p)
-{
-  // Make sure we can assume that data is linear
-  seastar::packet::psuedo_vector frags = p.fragments();
-  seastar::fragment f0 = frags.begin();
-  if (f0 == frags.end()) {
-    std::cout << "Empty packet!" << std::endl;
-    return 0;
-  }
-  if ((frags.end() - f0) / sizeof(fragments) > 1) {
-    std::cout <<  "Multi fragment packet" << std::endl;
-    return 0;
-  }
-
-  int ret;
-  char *payload = f0.base;
-  char *data_end = payload + f0.size;
-  unsigned int zero = 0;
+} __attribute__((__packed__));
 
-  // if the size exceeds the size of a cache entry do not bother going further
-  if (p->len > BMC_MAX_CACHE_DATA_SIZE + sizeof(struct memcached_udp_header))
-    return 0;
+typedef uint64_t u64;
+typedef uint32_t u32;
+typedef uint16_t u16;
+typedef uint8_t u8;
 
-  if (payload+5+1 <= data_end && payload[0] == 'V' && payload[1] == 'A' && payload[2] == 'L'
-      && payload[3] == 'U' && payload[4] == 'E' && payload[5] == ' ') { // if this is a GET reply
+/* static int stats_map_fd; */
+static int kcache_map_fd;
 
-    struct bmc_stats stats;
-    ret = bpf_map_lookup_elem(&map_stats, &zero, &stats);
-    if (!stats) {
-      return XDP_PASS;
+/* Initialize the things we need for BMC tx path. For example the map handles
+ * */
+int bmc_initilize(void)
+{
+    int ret;
+    /* ret = find_map_fd("map_stats", &stats_map_fd); */
+    /* if (ret != 0) { */
+    /*     return -1; */
+    /* } */
+    ret = find_map_fd("map_kcache", &kcache_map_fd);
+    if (ret != 0) {
+        return -1;
     }
-    stats->get_resp_count++;
-
-    bpf_tail_call(skb, &map_progs_tc, BMC_PROG_TC_UPDATE_CACHE);
-  }
-
-  return TC_ACT_OK;
+    return 0;
 }
 
-  SEC("bmc_update_cache")
-int bmc_update_cache_main(struct __sk_buff *skb)
+static int bmc_update_cache(char *payload, char *data_end)
 {
-  void *data_end = (void *)(long)skb->data_end;
-  void *data = (void *)(long)skb->data;
-  char *payload = (data + sizeof(struct ethhdr) + sizeof(struct iphdr) + sizeof(struct udphdr) + sizeof(struct memcached_udp_header));
-  unsigned int zero = 0;
-
+  int ret;
   u32 hash = FNV_OFFSET_BASIS_32;
 
   // compute the key hash
-#pragma clang loop unroll(disable)
   for (unsigned int off = 6; off-6 < BMC_MAX_KEY_LENGTH && payload+off+1 <= data_end && payload[off] != ' '; off++) {
     hash ^= payload[off];
     hash *= FNV_PRIME_32;
   }
 
   u32 cache_idx = hash % BMC_CACHE_ENTRY_COUNT;
-  struct bmc_cache_entry *entry = bpf_map_lookup_elem(&map_kcache, &cache_idx);
-  if (!entry) {
-    return TC_ACT_OK;
-  }
+  struct bmc_cache_entry e;
+  ret = bpf_map_lookup_elem(kcache_map_fd, &cache_idx, &e);
+  if (ret != 0 )
+      return -1;
+  struct bmc_cache_entry *entry = &e;
 
-  bpf_spin_lock(&entry->lock);
   if (entry->valid && entry->hash == hash) { // cache is up-to-date; no need to update
     int diff = 0;
-    // loop until both bytes are spaces ; or break if they are different
-#pragma clang loop unroll(disable)
     for (unsigned int off = 6; off-6 < BMC_MAX_KEY_LENGTH && payload+off+1 <= data_end && off < entry->len && (payload[off] != ' ' || entry->data[off] != ' '); off++) {
       if (entry->data[off] != payload[off]) {
         diff = 1;
@@ -87,15 +65,13 @@ int bmc_update_cache_main(struct __sk_buff *skb)
       }
     }
     if (diff == 0) {
-      bpf_spin_unlock(&entry->lock);
-      return TC_ACT_OK;
+      return 0;
     }
   }
 
   unsigned int count = 0;
   entry->len = 0;
   // store the reply from start to the '\n' that follows the data
-#pragma clang loop unroll(disable)
   for (unsigned int j = 0; j < BMC_MAX_CACHE_DATA_SIZE && payload+j+1 <= data_end && count < 2; j++) {
     entry->data[j] = payload[j];
     entry->len++;
@@ -106,17 +82,54 @@ int bmc_update_cache_main(struct __sk_buff *skb)
   if (count == 2) { // copy OK
     entry->valid = 1;
     entry->hash = hash;
-    bpf_spin_unlock(&entry->lock);
-    struct bmc_stats *stats = bpf_map_lookup_elem(&map_stats, &zero);
-    if (!stats) {
-      return XDP_PASS;
-    }
-    stats->update_count++;
-  } else {
-    bpf_spin_unlock(&entry->lock);
+    bpf_map_update_elem(kcache_map_fd, &cache_idx, entry, BPF_F_LOCK);
   }
 
-  return TC_ACT_OK;
+  return 0;
 }
 
+int bmc_tx_filter_main(seastar::net::packet &p)
+{
+  // Make sure we can assume that data is linear
+  auto frags = p.fragments();
+  seastar::net::fragment *f0 = frags.begin();
+  if (f0 == frags.end()) {
+    std::cout << "Empty packet!" << std::endl;
+    return 0;
+  }
+  int count_frags = (frags.end() - f0) / sizeof(*f0);
+  if (count_frags > 1) {
+    std::cout <<  "Multi fragment packet" << std::endl;
+    return 0;
+  }
 
+  int ret;
+  char *payload = f0->base;
+  char *data_end = payload + f0->size;
+  /* unsigned int zero = 0; */
+  assert(f0->size == p.len()); // since we only have one fragment the size of packet should be same as the size of fragment
+
+  // if the size exceeds the size of a cache entry do not bother going further
+  if (p.len() > BMC_MAX_CACHE_DATA_SIZE + sizeof(struct memcached_udp_header))
+    return 0;
+
+  if (payload+5+1 <= data_end && payload[0] == 'V' && payload[1] == 'A' && payload[2] == 'L'
+      && payload[3] == 'U' && payload[4] == 'E' && payload[5] == ' ') { // if this is a GET reply
+
+    /* struct bmc_stats stats; */
+    /* ret = bpf_map_lookup_elem(stats_map_fd, &zero, &stats); */
+    /* if (ret != 0) { */
+    /*   return -1; */
+    /* } */
+    /* stats.get_resp_count++; */
+    /* bpf_map_update_elem(stats_map_fd, &zero, &stats, BPF_EXIST); */
+
+    // bpf_tail_call(skb, &map_progs_tc, BMC_PROG_TC_UPDATE_CACHE);
+    ret = bmc_update_cache(payload, data_end);
+    if (ret != 0) {
+        return ret;
+    }
+  }
+
+  return 0;
+}
diff --git a/apps/memcached/bpf_userspace_helpers.h b/apps/memcached/bpf_userspace_helpers.h
new file mode 100644
index 00000000..cabcaf93
--- /dev/null
+++ b/apps/memcached/bpf_userspace_helpers.h
@@ -0,0 +1,46 @@
+#pragma once
+#include <stdio.h>
+#include <unistd.h>
+#include <bpf/bpf.h>
+#include <errno.h>
+
+/*
+ * @param map_name: a string indicating the name of the map
+ * @param map_fd_out: a pointer to the variable that will hold the maps fd value 
+ * @returns zero on success. one on error
+ * */
+int find_map_fd(const char *map_name, int *map_fd_out)
+{
+	struct bpf_map_info map_info = {};
+	uint32_t info_size = sizeof(map_info);
+	unsigned int id = 0;
+	int ret = 0;
+	int map_fd;
+	int flag = 0;
+	while (!ret) {
+		ret = bpf_map_get_next_id(id, &id);
+		if (ret) {
+			if (errno == ENOENT)
+				break;
+			printf("can't get next map: %s%s", strerror(errno),
+				errno == EINVAL ? " -- kernel too old?" : "");
+			break;
+		}
+		map_fd = bpf_map_get_fd_by_id(id);
+		bpf_obj_get_info_by_fd(map_fd, &map_info, &info_size);
+		/* Compare the found map's name with our list of names */
+		if (!strcmp(map_info.name, map_name)) {
+			*map_fd_out = map_fd;
+			flag = 1;
+			break;
+		} else {
+			close(map_fd);
+		}
+	}
+
+	if (flag) {
+		return 0;
+	} else {
+		return 1;
+	}
+}
diff --git a/apps/memcached/memcache.cc b/apps/memcached/memcache.cc
index cc56f1df..cb6cf326 100644
--- a/apps/memcached/memcache.cc
+++ b/apps/memcached/memcache.cc
@@ -1442,6 +1442,11 @@ int main(int ac, char** av) {
     distributed<memcache::tcp_server> tcp_server;
     memcache::stats_printer stats(cache);
 
+    if (bmc_initilize() != 0) {
+      std::cerr << "Failed at initializing BMC" << std::endl;
+      return -1;
+    }
+
     namespace bpo = boost::program_options;
     app_template app;
     app.add_options()
-- 
2.34.1

